git config              ----------> .git/config     in current working directory.
git config --global     ----------> ~/.gitconfig 
git config --system     ----------> /etc/gitconfig
git config --list or -l     list all configurations.
git config <property-name>  show value of property-name

git help <verb>     show manual page for the verb(like config, add and branch)

git init            initialize git repository in local directory

git clone <url>     url of remote git repository
git clone <url> <newDirectoryName>

git status --short(or -s)


---------------- Date 11 nov 2019 ---------------
git diff    compares the changes between the current files and staged files
git diff --staged(or --cached)  compares the changes between staged files and files on last commit

git commit
git commit -v   while committing shows the difference in the file.
git commit -a   commit tracked file directly without using git add command.

git rm  to remove file from staging area as well as from current working directory
        and stage the deletion
git rm --cached <fileName>  to remove file from staging area


---------------- Date 13 nov 2019 ---------------
git mv <from-filename> <to-filename>    used to rename or move a file in git

git log
git log -p      -p flag will show the difference between commits.
git log -p -2   -2 flag will limit the output to last 2 entries. It can be any natural number
git log --stat  shows commits with brief status about files addition or deletion
git log --oneline
git log --pretty=format:"%h - %an, %ar: %s" see options.png file
git log --pretty=format:"%h %s" --graph     graph flag will show line diagram of commits
git log -Sfunction_name     -S option will show the last commit that modified function_name.
git log --<path>            here path is the name of file or directory to limit commits associated with that file
git log --since=2.weeks
git log --author
git log --grep
git log --author --grep --all-match
example command      git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \


---------------- Date 14 nov 2019 ---------------
git remote      to see all remote servers configured for repository
git remote -v   shows the url of remote servers
git remote add <shortname> <url>
git remote show <remote-name>   show details of remote name

git fetch <remote-name or url>  to fetch from remote repository to local repository

git pull    fetch from remote repository and merge to local repository

git push <remote-name> <branch-name>    push local branch commits to remote repository


---------------- Date 17 nov 2019 ---------------
git remote rename <from> <to>   use to rename the remote name
git remote remove <remote-name>

git tag     list all tags
git tag -l "v1.8.5*"    list only version 1.8.5 and related
git tag -a <tagname>    -m "my version 1.4"     -a is to create annotated tag, add the tag to current commit
git tag <tagname>       creates lightweight tag and add to current commit
git show <tagname>      shows detail about the tag and commit it added to

git push origin <tagname>   share single tag to remote
git push origin --tags      share all the tags to remote

git checkout -b <branch-name> <tagname>     creates a branch with a tagname, and checkout to it

git config --global alias.co checkout       creates alias for checkout keyword, hence we can use command like [git co <branch-name>]
git config --global alias.ci commit         creates alias for commit keyword, hence we can use commit like [git ci -m "message"]
git config --global alias.cim "commit -m"   creates alias for "commit -m", hence we can use command like [git cim "message"]

git branch <branch-name>    creates a new branch
git branch -d <branch-name> to delete the branch
git checkout <branch-name>  switch to branch(move HEAD pointer to given branch)
git checkout -b <branch-name>   creates a branch and switch to it

git log --oneline --all --graph


---------------- Date 18 nov 2019 ---------------
git mergetool   provides visual representation to resolve conflicts
git branch -v   to see the last commit on each branch
git branch --merged     list the branches that are merged to the branch you are currently on
git branch --no-merged  list the branches that are not merged to the branch you are currently on

git push <remote-name> <branch-name>    
git push <remote-name> <branch-name>:<new-branch-name>

git config --global credential.helper cache     

git checkout -b serverfix origin/serverfix  This gives you a local branch that you can work on that starts where origin/
                                            serverfix is.


---------------- Date 19 nov 2019 ---------------

git checkout -b <branch> <remote>/<branch>      shorter version(git checkout --track <remote>/<branch>)
git checkout serverfix      If the branch name you’re trying to checkout (a) doesn’t exist and (b) exactly matches
                            a name on only one remote, Git will create a tracking branch for you

git branch -vv  This will list out your local branches with more information
                including what each branch is tracking and if your local branch is
                ahead, behind or both.

If you want totally up to date ahead and behind numbers, you’ll need to fetch from all your
remotes right before running this. You could do that like this: 
git fetch --all     git branch -vv

git push <remote> --delete <branch>     deletes the remote branch
